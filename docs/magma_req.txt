p := 2^127 - 1;
K<i> := GF(p^2);

ds := FREEVAR;
dr := VARTWO;

for di := dr to (dr+6) by 1 do

print ds;
print di;

h := ((2^(ds)) + (2^(di)))*i;

hi := (h^-1);
u := hi^2;
a := -u;
B := (2 - SquareRoot(4 + 48 * a)) / (2 * a);
C := B * B / 2;
s := (C / 9 - 1) / i;

// Validate:
C1 := 9 * (1 + s * i);
B1 := SquareRoot(2 * C);
a1 := (12 / B1 + 2) / B1;
d1 := (12 / B1 - 2) / B1;
// Note a1 != a if guess +/- in B step wrong.  This is fine because we end up
// on the same curve either way.

wa := -6 * (5 - 3 * s * i);
wb := 8 * (7 - 9 * s * i);

E := EllipticCurve([K | wa, wb]);

time EP := Order(E);

if EP mod 8 eq 0 then
   TEST := IsPrime(EP div 8);
else
   if EP mod 4 eq 0 then
      TEST := IsPrime(EP div 4);
   else
      if EP mod 2 eq 0 then
           TEST := IsPrime(EP div 2);
      else
           TEST := IsPrime(EP);
      end if;
   end if;
end if;

print h;
if TEST eq true then
   print "FOUND A LAINEY CURVE!";
	print "hi =";
	print hi;
	print "u =";
	print u;
	print "a =";
	print a;
	print "B =";
	print B;
	print "C =";
	print C;
	print "s =";
	print s;
	print "C1 =";
	print C1;
	print "B1 =";
	print B1;
	print "a1 =";
	print a1;
	print "d1 =";
	print d1;
	print "wa =";
	print wa;
	print "wb =";
	print wb;
	print "EP =";
	print EP;
	Factorization(EP);
else
   print "bad curve";
end if;

end for;

