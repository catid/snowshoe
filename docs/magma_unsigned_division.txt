q := 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA6261414C0DC87D3CE9B68E3B09E01A5;


// for a1/q:

d := q;
l := 252;
n := Random(2^379);
N := 379;

quot := n div q;

mp := 2^(N+l) div d - 2^N + 1;

print mp;
print 20320438794797923088800193309000281241044727321160239353067774495651706225708:Hex;

// Live computation starts here:

// t <- MULUH m' * n
t := (mp * n) div (2^N);

// s <- t + SRL(n - t, 1)
s := t + ((n - t) div 2);

// quotient <- s >> (l - 1)
quotp := s div (2^(l-1));

print quot;
print quotp;


// for a2/q:

d := q;
l := 252;
n := Random(2^316);
N := 316;

quot := n div q;

mp := 2^(N+l) div d - 2^N + 1;

print mp;
print 2203146388717863364981757043716890892499387258293202656393:Hex;

// Live computation starts here:

// t <- MULUH m' * n
t := (mp * n) div (2^N);

// s <- t + SRL(n - t, 1)
s := t + ((n - t) div 2);

// quotient <- s >> (l - 1)
quotp := s div (2^(l-1));

print quot;
print quotp;

