// Elliptic curve point operations
#include "ecpt.cpp"
#include "misc.cpp"

#include <iostream>
#include <iomanip>
using namespace std;

/*
 * Mask a random number to produce a compatible scalar for multiplication
 */

void ec_mask_scalar(u64 k[4]) {
	// Prime order of the curve = q, word-mapped:
	// 0x0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA6261414C0DC87D3CE9B68E3B09E01A5
	//   (      3       )(       2      )(       1      )(       0      )

	// Clear high 5 bits
	// Clears one extra bit to simplify key generation
	k[3] &= 0x07FFFFFFFFFFFFFFULL;

	// Largest value after filtering:
	// 0x07FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	//   (      3       )(       2      )(       1      )(       0      )
}

/*
 * GLV-SAC Scalar Recoding Algorithm for m=2 [1]
 *
 * Returns low bit of 'a'.
 */

static u32 ec_recode_scalars_2(ufp &a, ufp &b, const int len) {
	u32 lsb = ((u32)a.i[0] & 1) ^ 1;
	a.w -= lsb;
	a.w >>= 1;
	a.w |= (u128)1 << (len - 1);

	const u128 an = ~a.w;
	u128 mask = 1;
	for (int ii = 1; ii < len; ++ii) {
		const u128 anmask = an & mask;
		b.w += (b.w & anmask) << 1;
		mask <<= 1;
	}

	return lsb;
}

/*
 * GLV-SAC Scalar Recoding Algorithm for m=4 [1]
 *
 * Returns low bit of 'a'.
 */

static u32 ec_recode_scalars_4(ufp &a, ufp &b, ufp &c, ufp &d, const int len) {
	u32 lsb = ((u32)a.i[0] & 1) ^ 1;
	a.w -= lsb;
	a.w >>= 1;
	a.w |= (u128)1 << (len - 1);

	const u128 an = ~a.w;
	u128 mask = 1;
	for (int ii = 1; ii < len; ++ii) {
		const u128 anmask = an & mask;
		b.w += (b.w & anmask) << 1;
		c.w += (c.w & anmask) << 1;
		d.w += (d.w & anmask) << 1;
		mask <<= 1;
	}

	return lsb;
}


//// Constant-time Point Multiplication

/*
 * Precomputed table generation
 *
 * Using GLV-SAC Precomputation with m=2 [1], assuming window size of 2 bits
 *
 * Window of 2 bits table selection:
 *
 * aa bb -> evaluated (unsigned table index), sign
 * 00 00    -3a + 0b (0)-
 * 00 01    -3a - 1b (1)-
 * 00 10    -3a - 2b (2)-
 * 00 11    -3a - 3b (3)-
 * 01 00    -1a + 0b (4)-
 * 01 01    -1a + 1b (5)-
 * 01 10    -1a - 2b (6)-
 * 01 11    -1a - 1b (7)-
 * 10 00    1a + 0b (4)+
 * 10 01    1a - 1b (5)+
 * 10 10    1a + 2b (6)+
 * 10 11    1a + 1b (7)+
 * 11 00    3a + 0b (0)+
 * 11 01    3a + 1b (1)+
 * 11 10    3a + 2b (2)+
 * 11 11    3a + 3b (3)+
 *
 * Table index is simply = (a0 ^ a1) || b1 || b0
 *
 * The differences above from [1] seem to improve the efficiency of evaulation
 * and they make the code easier to analyze.
 */

static void ec_gen_table_2(const ecpt &a, const ecpt &b, ecpt TABLE[8]) {
	ecpt bn;
	ec_neg(b, bn);

	// P[4] = a
	ec_set(a, TABLE[4]);

	// P[5] = a - b
	ufe t2b;
	ec_add(a, bn, TABLE[5], true, true, true, t2b);

	// P[7] = a + b
	ec_add(a, b, TABLE[7], true, true, true, t2b);

	// P[6] = a + 2b
	ec_add(TABLE[7], b, TABLE[6], true, true, true, t2b);

	ecpt a2;
	ec_dbl(a, a2, true, t2b);

	// P[0] = 3a
	ec_add(a2, a, TABLE[0], true, false, true, t2b);

	// P[1] = 3a + b
	ec_add(TABLE[0], b, TABLE[1], true, true, true, t2b);

	// P[2] = 3a + 2b
	ec_add(TABLE[1], b, TABLE[2], true, true, true, t2b);

	// P[3] = 3a + 3b
	ec_add(TABLE[2], b, TABLE[3], true, true, true, t2b);
}

/*
 * Table index is simply = (a0 ^ a1) || b1 || b0
 */

static CAT_INLINE void ec_table_select_2(const ecpt *table, const ufp &a, const ufp &b, const int index, ecpt &r) {
	u32 bits = (u32)(a.w >> index);
	u32 k = ((bits ^ (bits >> 1)) & 1) << 2;
	k |= (u32)(b.w >> index) & 3;

	ec_zero(r);

	for (int ii = 0; ii < 8; ++ii) {
		// Generate a mask that is -1 if ii == index, else 0
		const u128 mask = ec_gen_mask(ii, k);

		// Add in the masked table entry
		ec_xor_mask(table[ii], mask, r);
	}

	ec_cond_neg(((bits >> 1) & 1) ^ 1, r);
}

/*
 * Multiplication by variable base point
 *
 * Preconditions:
 * 	0 < k < q
 *
 * Multiplies the point by k * 4 and stores the result in R
 */

// R = k*4*P
void ec_mul(const u64 k[4], const ecpt_affine &P0, ecpt_affine &R) {
	// Decompose scalar into subscalars
	ufp a, b;
	s32 asign, bsign;
	gls_decompose(k, asign, a, bsign, b);

	// Q = endomorphism of P
	ecpt_affine Qa;
	gls_morph(P0.x, P0.y, Qa.x, Qa.y);
	ecpt Q;
	ec_expand(Qa, Q);
	ec_cond_neg(bsign, Q);

	// Set base point signs
	ecpt P;
	ec_expand(P0, P);
	ec_cond_neg(asign, P);

	// Precompute multiplication table
	ecpt table[8];
	ec_gen_table_2(P, Q, table);

	// Recode subscalars
	u32 recode_bit = ec_recode_scalars_2(a, b, 128);

	// Initialize working point
	ecpt X;
	ec_table_select_2(table, a, b, 126, X);

	ufe t2b;
	for (int ii = 124; ii >= 0; ii -= 2) {
		ecpt T;
		ec_table_select_2(table, a, b, ii, T);

		ec_dbl(X, X, false, t2b);
		ec_dbl(X, X, false, t2b);
		ec_add(X, T, X, false, false, false, t2b);
	}

	// If bit == 1, X <- X + P (inverted logic from [1])
	ec_cond_add(recode_bit, X, P, X, true, false, t2b);

	// Multiply by 4 to avoid small subgroup attack
	ec_dbl(X, X, false, t2b);
	ec_dbl(X, X, false, t2b);

	// Compute affine coordinates in R
	ec_affine(X, R);
}

/*
 * Multiplication by generator base point
 */

#ifdef REF_MUL

void ec_mul_gen(const u64 k[4], ecpt_affine &R) {
	// P = G (affine)
	ecpt_affine P;
	fe_set(EC_GX, P.x);
	fe_set(EC_GY, P.y);

	// For simplicity, use the same ec_mul function for generator point multiplication
	ec_mul(k, P, R);
}

#else

static const u64 PRECOMP_TABLE_0[] = {
	0xe692c2b52108689ULL, 0x29b1db37cf0df068ULL, 0x81b333cd2ec495dfULL, 0x2f866bf8ceb54fccULL,
	0xed33e9d7b8cfb7f4ULL, 0x77be0cb0857980c4ULL, 0x73621b5857122ccdULL, 0x704a4bc8a79fd8b2ULL,
	0xe692c2b52108689ULL, 0x29b1db37cf0df068ULL, 0x81b333cd2ec495dfULL, 0x2f866bf8ceb54fccULL,
	0x5e1fd3ecfcfdff1aULL, 0x27634f182db9db14ULL, 0x37fc82f4a176d3dULL, 0x1bda028be5dba5cfULL,
	0x379c14bedff3b585ULL, 0x4dd33e48bf092bULL, 0xaf686d451b863a78ULL, 0x2a6ccf5c26a8fb2aULL,
	0x7e84cb197358ae9cULL, 0x9c54bc4d7a87234ULL, 0x327c324315124662ULL, 0x939f69f1a865842ULL,
	0x93dd21b1b2d48efcULL, 0x67cb6223dff1d4b3ULL, 0xfdab20d487ffca5bULL, 0x4c38d4605dc2e782ULL,
	0x8fa675fd4f4174e2ULL, 0x4e2ce9736a3e8a17ULL, 0xe1570cae631ca1f5ULL, 0x66ce0970b4750cd5ULL,
	0xd839826fd4cbd7ULL, 0x1b88fb4100ea429cULL, 0x212d4e70c273f7eeULL, 0x553e8012c68a40b2ULL,
	0x756c46c9cc52e3bdULL, 0x5176f4ada9f1c2cdULL, 0x163670163e9e3a27ULL, 0x7e97203d4c1042acULL,
	0xb0dba9e45d502d82ULL, 0x2bf0aa13b67d1578ULL, 0xb6d9181671531590ULL, 0x72214c283d666ed9ULL,
	0x936cfdf768533362ULL, 0x4165ae71c431bdf0ULL, 0xfedb71edeca86d7ULL, 0x7bb6904ae485d985ULL,
	0xa1a0c8edeb5fbab1ULL, 0x6215e3ad06052fcdULL, 0x8a21f4939cef2754ULL, 0x734933b07450d96bULL,
	0x952a73c22bf708ULL, 0x373c2db454f36bf1ULL, 0x2795e6ce0159a2bULL, 0x7d2e83be1060ffc2ULL,
	0x7b0d7b77b9efc6cfULL, 0x3d7744bc0123d446ULL, 0x5f3ba3e133b6e10ULL, 0x7e85a2519c4cc571ULL,
	0x465f035316526a52ULL, 0x6b2c1723781a990eULL, 0xd188dd206061e1c6ULL, 0xd61a95cc13d003bULL,
	0xa59d0b53e16861dfULL, 0x4d07188ec7bfb9b7ULL, 0x622326ca47dd3b31ULL, 0x693554c8abac49c3ULL,
	0xed3810dfedfe0ed7ULL, 0x59cca6630a792822ULL, 0x456081c85ff85b8dULL, 0x524223ddb2b248aeULL,
	0xed043e329c6f435bULL, 0x7a866a98fc6f7751ULL, 0x6cb538ca7553f166ULL, 0x7d736b62a035eb3ULL,
	0x3df4cd57d1619a5fULL, 0x73b6be894aff68e5ULL, 0xbcf4acbe8b228110ULL, 0x707b4ff48dd2f117ULL,
	0xbfc7349ac374f93bULL, 0x388ceea5dd9e92c4ULL, 0xeb3d49159db9816eULL, 0x3cf6ad8013e9ecaaULL,
	0x9199096de47257d1ULL, 0x6bbbc1178aa8a2f7ULL, 0x7225f78c0480546bULL, 0x3c9ad94640dce558ULL,
	0x5ccb1f30c314e5afULL, 0x7b42dff17ce075fcULL, 0xa6b9186cc5cc9debULL, 0x2b0b06adb929928bULL,
	0xff52605ffbcb2f05ULL, 0x7db672b87d6f6f53ULL, 0xda7c8a6ea8805574ULL, 0x7cb16f68628b9811ULL,
	0xc0257189412dee27ULL, 0x22d1b2a099cef701ULL, 0x467a15261c3e929dULL, 0x7fede0e4cf68d988ULL,
	0x80c3dc5f34ad2f0cULL, 0x6e4c44e71fab5f84ULL, 0x9cae3727bb435cbcULL, 0x267325c8944698f8ULL,
	0xc24b877b742c9a05ULL, 0x398035cf17a1fd68ULL, 0xf6ab5c4f82b09b93ULL, 0xadd23376a3843edULL,
	0x5359831825b9e503ULL, 0x15211871339afc1cULL, 0xe4577fa0d708eb70ULL, 0x25bb76264d95a36cULL,
	0x47876e70f53e37aeULL, 0x2eb7b12e844abf9dULL, 0x8e0da963362d510eULL, 0x4afff733fb868461ULL,
	0xf726f8792cfeb73dULL, 0x5a4c3ecc53df57b1ULL, 0xd13e4bb4d1c68c7dULL, 0x619f58c279de0d96ULL,
	0x6d089c88391c48c7ULL, 0x443de1b02cf54146ULL, 0x6c9f3ec5116ca0a2ULL, 0x1e3aaf305ff80556ULL,
	0x8f30e678fe5cc5b5ULL, 0xa686ae51d5cab57ULL, 0x9227bb63ae42b5f2ULL, 0x4f9a21929472656eULL,
	0x6565890c13b45000ULL, 0x3aa48ac98bbafa70ULL, 0xb916e8708b5e68c6ULL, 0x767cfeca5a760b09ULL,
	0x9f718cc18bbba505ULL, 0x52e987e2bf2c3704ULL, 0x32ec230eeba4a55eULL, 0x35f4ec5b4cf8418aULL,
	0x88af55ac341cfb1cULL, 0x38beba0508dbcd30ULL, 0xe980895ca25d327ULL, 0x6cd5895fd7d5c477ULL,
	0x7c29d1f4d6e6b57cULL, 0x3d10a527e5d36249ULL, 0xa47e28a1758db7bULL, 0x7971f1b76f53a0adULL,
	0xb0e34d0069c5ba73ULL, 0x4218bc1da4529881ULL, 0xaa92ff750342d32eULL, 0x1c28424c208ec96dULL,
	0x758d6406cd6b103fULL, 0x71f8034098ee04f9ULL, 0x1ce41e6f1d6163e4ULL, 0x43f953474d01af5aULL,
	0x83bbcba54264d05aULL, 0x6f07eb4a23a9ee70ULL, 0x1d98eaf9518ae2cdULL, 0x548b8c55144922d2ULL,
	0xe26472e01614eeb3ULL, 0x45f5a8d224abcbeULL, 0x482f270778f0b897ULL, 0x22ff17a77ae09910ULL,
	0x2460a6fb23522c99ULL, 0x435deca2597b7704ULL, 0x6cb3b4615967ad92ULL, 0x780dc36af2cd64d9ULL,
	0x86932540f7d64bf0ULL, 0x4109c9d0fec6b4f5ULL, 0xb24ef33503423725ULL, 0x4b19baa3f9e0fd4cULL,
	0x7b8046c2b439507fULL, 0x3ba5a82c8f654eaULL, 0xb6d6697a2505c378ULL, 0x332ba23ab6354148ULL,
	0xf373f9eb3d450a90ULL, 0x2b70dac98c4afa5fULL, 0xec376cb10043f3c2ULL, 0x1a1806a1dd7280e9ULL,
	0x1608f1d716581b1cULL, 0x7e2a5f26ddda197eULL, 0xe7a804a4e40b3996ULL, 0x5a7f69b4620167dcULL,
	0xd395ee245f463af2ULL, 0x20086d8691d0defULL, 0x74d6975cdb268246ULL, 0x7d8a353d289d207dULL,
	0x8c0800a1525d6630ULL, 0xb704d3dce78ed7cULL, 0xe53056d7e4293b38ULL, 0x3cd37afcb97dd478ULL,
	0x1c25c0696e51d12bULL, 0x3414aa0aa5044e44ULL, 0xfabd92c0942feaefULL, 0xc41cbf2100bc0b5ULL,
	0xfac8546a633ed2bcULL, 0x6b08484366b3a625ULL, 0xf2f679f5b55259c3ULL, 0x760ac0a92b41304ULL,
	0xedb026d0a28a27d0ULL, 0x637e8dfc021c164ULL, 0x97679b5089603ae0ULL, 0x49ce609611f5eadbULL,
	0xe62f08666b40c5cULL, 0x5341334acd012da5ULL, 0xab7035684f9811d1ULL, 0x3e9ad94a004fe68bULL,
	0x160935a339c8919aULL, 0x74c6763f7e51c7bbULL, 0xdab9c7e1871d1476ULL, 0x4128dd49ec9dedcULL,
	0x8cfa337cb79f8bd9ULL, 0x4d5ad2b768c51870ULL, 0x36445f6c1f1453dcULL, 0x59f4de1a1df932b1ULL,
	0x7d79e2214a12d0a0ULL, 0x663d6abd13931043ULL, 0x38f4c391bae81f57ULL, 0x44aac46e0d5c841dULL,
	0xf6f345bd08d4287dULL, 0x1acfee7a3455a45ULL, 0x9a23a47c10a3c505ULL, 0x2895c75e30c49438ULL,
	0x2d2a817c1f7c2161ULL, 0x74079cd0c713d4acULL, 0x9bf37dc87a1621b4ULL, 0x573d0de1fbfad5fbULL,
	0x6d2db62cc8cba522ULL, 0x208053cfc70f6fd0ULL, 0x917fd067167bde2aULL, 0x6bf2f367b0883792ULL,
	0xea8500ab60c2013bULL, 0x566eaea14f421accULL, 0x6df685afe501ee5fULL, 0x42c811e70d82a085ULL,
	0x2733c2302c2d57ecULL, 0x7230b4054514d994ULL, 0xb97ef0717b274042ULL, 0x69609a76f4b200b0ULL,
	0x50a8aad93eebf289ULL, 0x541ca1895a141fd6ULL, 0xd7503768e88c0e37ULL, 0x1826b83e8b0a52c7ULL,
	0x979c387f30bf99c6ULL, 0x3425243631352512ULL, 0x3b84475167490131ULL, 0xc21d5050e61ca9bULL,
	0x9c4ea12f317dc198ULL, 0x4ac756e689af52a0ULL, 0xd27c84627a162f6eULL, 0x34dcdf02265c2c92ULL,
	0x53762b74a4b4aae2ULL, 0xc55998cb8b8ccbfULL, 0x3ee1c58268e5ecf7ULL, 0x4b823e42e7a28412ULL,
	0x4fce894eaa94de79ULL, 0x1afc0dd20421f086ULL, 0xf16fac3a127227bfULL, 0x1c94e6f71abc4c23ULL,
	0xfc3a07608384d351ULL, 0x1dd3318dbabae8f4ULL, 0xd30bbd85d52db087ULL, 0x3a881898612fe344ULL,
	0x90e537a1e7e7b55ULL, 0x47d0caf6418b937bULL, 0xd005f49e10dc8de4ULL, 0x1f6e68e39641792dULL,
	0x7413d48089af6e13ULL, 0x21ff1c9ceea3a560ULL, 0x6409074ab1eaf4b5ULL, 0x2281d4e1418b4f81ULL,
	0xfbb7b7b3f461aa60ULL, 0x1f3831aa73dfd2d9ULL, 0x48ff29fb9a220565ULL, 0xd8d76e9c5ef630aULL,
	0xb7fdde298ab646f9ULL, 0x44140f21fbe17012ULL, 0x79f099296f37b0dcULL, 0x7beb8484bd6efc90ULL,
	0x4485c4ce88e6bbaULL, 0x5b7458f55027f2c0ULL, 0x273500e95b07da2fULL, 0x66ed30f0523f538bULL,
	0x1d524c333d28d2bbULL, 0xfe1da95845f647fULL, 0x7fcd272fce167cdULL, 0x21f8d1b34d713380ULL,
	0x2740f3d3fa6f41f6ULL, 0x5ca9bdb80c932b21ULL, 0xcece488aadc045ddULL, 0x16c003e3517ee14eULL,
	0x9b9efd8fef02d9c4ULL, 0x727af0e163c556f9ULL, 0x4e412f6259aae441ULL, 0x504e8bda58f8399fULL,
	0xc77cb17078418879ULL, 0x4054318db9aeea70ULL, 0xa600c19f727c89ULL, 0xef87e621e524e12ULL,
	0xffa5e3b602db0290ULL, 0x5f9fb060e4705da7ULL, 0xd7b9ff2a86a63b7fULL, 0x3aa66c439e4b700fULL,
	0xfa4437f4b20909f3ULL, 0xdc8fbf30ec42d51ULL, 0xd36196c8444f3907ULL, 0x50b9282edd99355ULL,
	0xb585a2f08cbb26cfULL, 0x6b4e0f2a3011701fULL, 0x483501651527cce5ULL, 0x609f71474ab5f476ULL,
	0xb25054db53913342ULL, 0x1fa56db5f89e63d7ULL, 0x54abcaa8a3fdfb01ULL, 0x6719a825cdda306dULL,
	0xf4b2a728c852611ULL, 0x3c812e310819b518ULL, 0x1c9e936167eccd4bULL, 0x65fb1650dd97034cULL,
	0xa36c5501999eee22ULL, 0x26b909a638949586ULL, 0xe07eaf4cdbef61dULL, 0x4b8ce80d7676c5ccULL,
	0xf5df4f03e41f24a1ULL, 0x6ee70d9e120c2a69ULL, 0xc88ac0f0c4d4c5beULL, 0x436537531ff08e8cULL,
	0x73e864b67735139cULL, 0x7988cc2c57416c1cULL, 0xcb494287aface3d1ULL, 0x43ce179bab2c74d6ULL,
	0x3dc70516043d6244ULL, 0x5e4b7603dcaafcf6ULL, 0xd7e3d99e69fe5cd4ULL, 0x27969665ac276854ULL,
	0xbf69ba1c4166d917ULL, 0x7588fec34c8660ffULL, 0xaa101fd882665ce5ULL, 0x15d442588bb74986ULL,
	0x550bb43af0fc0dacULL, 0x6746c7762360a791ULL, 0xcf754584a02393f0ULL, 0x788125a0e5a4eb46ULL,
	0x731f0983249ee974ULL, 0x62250c72c36109b1ULL, 0xe6fc07442e66bae8ULL, 0x5c804d71398e7251ULL,
	0x976aa51b899b10d0ULL, 0x44837eacb11ff094ULL, 0x6b8fc4898697b09dULL, 0x6f17c1a01396252aULL,
	0xf781d746fb9d3ee6ULL, 0x2e2851b43c835ba4ULL, 0xa55942bd2d257e68ULL, 0x3e3b2bed916f7c97ULL,
	0xd29919793ff2e93bULL, 0xbdf581aae8ff90cULL, 0xae74f2d5c6f1b0a9ULL, 0x3f97d5288630bae8ULL,
	0xc595c9a9361ca55dULL, 0xb96f5a98c819d92ULL, 0x1ab506209a78f72eULL, 0x157fc033c0b02c52ULL,
	0x68cbd16c685f7552ULL, 0x36b61452aaac457bULL, 0x7f2f7c614033fce3ULL, 0x3b1b3cbc019a424fULL,
	0x2e31fcf0d87498a6ULL, 0x3d084a70a5611b02ULL, 0x151a717a3e789bf9ULL, 0x550d88194554363fULL,
	0x621aedb7da26ad4dULL, 0x4e4ab2c1a7c3f8cULL, 0xd6e73fada99914c8ULL, 0x64b2501635cb4422ULL,
	0x4d3dce03bdd57921ULL, 0x264a3c37abe8734fULL, 0x95f4e276a9d80511ULL, 0x26c9e498749bd2c7ULL,
	0xa91ea62a7fbefb6dULL, 0x3cdef06c3662fbc3ULL, 0x7e210771e5cfd386ULL, 0xb7b8b412b977087ULL,
	0x6fbecbfd924dac0dULL, 0x6d2a57910ea2ef60ULL, 0x33e95eff5fbc067cULL, 0x64c5bbeabb965cc7ULL,
	0xd2025b2acb92e2eeULL, 0x5388a897224e1f68ULL, 0xb1bed2f52e2e51a9ULL, 0x4cd546f8b1c512dfULL,
	0xef578803f4d4a8bfULL, 0x2ebcc7aad7f1a2e5ULL, 0xa7ec04f65b0ca4a4ULL, 0x77d58103c1b49f6ULL,
	0xf2568b206f20e46aULL, 0x6fe885fa150b019bULL, 0x61df582ffe503db3ULL, 0x3700e14d6206dcd8ULL,
	0x5a732baa3744de46ULL, 0x72cb9ac4ab004068ULL, 0x7a7a7fe4961a32aULL, 0x4290408e9ba77d49ULL,
	0x3ab4933d79466ea5ULL, 0x433acc36c5423730ULL, 0xf5d10ef990b19833ULL, 0x472b3178c6f3e94eULL,
	0xbc463dc4a7900685ULL, 0x2a6a0acd2b5c60d3ULL, 0xcc2466480ccb1a28ULL, 0x18f7d40f40405031ULL,
	0x27c119caef0bb53dULL, 0x3695b94fca4805d5ULL, 0xc2bbebc1689e2b33ULL, 0x1f9d00f47e309451ULL,
	0x8c2381f1052f0e0eULL, 0x5248f614e2c73a4cULL, 0xb659c4decfb394f6ULL, 0x3b191f6e74315640ULL,
	0x7d02f75a1a4d975fULL, 0x35d2b8597376e787ULL, 0xf03d07a3ea16627cULL, 0x67401f214d4e6dcaULL,
	0xd0ce032556945b3fULL, 0x181496b5a4f3bdafULL, 0xf948283552c962f9ULL, 0x141992ad2d03c11fULL,
	0x504c27138b5e884fULL, 0x7f91aa4b49be24deULL, 0x457007091a5ac7c2ULL, 0x26f16c7b9cd65df5ULL,
	0x261801322356c40aULL, 0x39f785c4f688aa09ULL, 0x5f9bf11af4215acdULL, 0x295361c3bbe326c8ULL,
	0xc66a5862dfb4bbeaULL, 0x626b137624f2d730ULL, 0x4320430bba6c9381ULL, 0x65156bddf9d3d9c5ULL,
	0x33eba0f8a86caf3fULL, 0x2a38f20908d8ea8ULL, 0xb0fbe3e1c5e62d7fULL, 0x48c363f7041e603ULL,
	0x1a3a2fcd1b812557ULL, 0x192a9675c495ee59ULL, 0xa2428dbffa196d84ULL, 0x1277b6f0738a63e8ULL,
	0x162f41c79c51fce7ULL, 0x5a3a950b4035c1eULL, 0xb7ae9c57f462ce6ULL, 0x18f7992605789ec4ULL,
	0x3ca65e4094daf875ULL, 0x1aa1f152b7b10678ULL, 0x518fcc9d9c565398ULL, 0x51b6ab3af39fbd9eULL,
	0xf1674e2c19ca29e2ULL, 0x456f487d098bc519ULL, 0x2cf39f7c5663fa4ULL, 0x4a036fe91733305bULL,
	0x91a57ed6c45cce0cULL, 0x1f5b68bec9a173d8ULL, 0xb347683c0592b4deULL, 0x5c5e300afa10730dULL,
	0x1786e786aa98ba71ULL, 0xad6ba95d8e42611ULL, 0x12eed90360031610ULL, 0x697f9e20b39a4e37ULL,
	0x3c58650c2e6a33bbULL, 0x27682f31986949cfULL, 0x4d39b43e6c4eaa78ULL, 0x79b073f2a5e5c8b7ULL,
	0xf8e8b385fef00d1dULL, 0x10c59881b16d0792ULL, 0x477bdc14bdaa8db0ULL, 0x443531c2a6ce51dcULL,
	0xc92caf756aac4318ULL, 0x65eaa1d07acb7ba5ULL, 0x39166fc0f090572dULL, 0x33e3b553bd03aee0ULL,
	0x8385611b68ce01cbULL, 0x794690297b4a2c13ULL, 0x22dacb87bb45f098ULL, 0x57e4d8e250561c83ULL,
	0x55cb4da8cea4306eULL, 0xa0c99aa06972f3eULL, 0x44eedfe6b7398152ULL, 0x3b96198eed8d034ULL,
	0x1085a76f024ad5aeULL, 0x77f6852693343611ULL, 0x6c43f2f6a68e385cULL, 0x1247777ff3a2ddb5ULL,
	0x8c6dbecd8ae5a207ULL, 0x7639ab694b4aba97ULL, 0x12c51b14a11b0195ULL, 0x6f7aee8b215aac92ULL,
	0x7ec15595eff17f3cULL, 0x292cf546ee486d7ULL, 0x36ba4df34199a408ULL, 0x5e148b6abf57d489ULL,
	0x9dac4bb8a36bf150ULL, 0x25483fa71f422e6bULL, 0x541a759d616151ffULL, 0x44274f76f95bb845ULL,
	0xdcd004ea96677a4eULL, 0x64e3e6a623b84f87ULL, 0xdd07ef7f90e30b1ULL, 0x2446d5aefed406c0ULL,
	0x890382367f417e60ULL, 0x114e7dd77bf30811ULL, 0x44b9b4afd789896aULL, 0x433d0d4e534b6623ULL,
	0xa38ed142c9b09755ULL, 0x498e70014b918cf5ULL, 0x8753772c6020a957ULL, 0x6c6f79ce426026baULL,
	0xc648b18ed4f0dbf7ULL, 0x617952167a2ce9c1ULL, 0x59ea6622d0628888ULL, 0x3ce8785fe8fd17e7ULL,
	0xb1ca1fde907e3f3bULL, 0x44bc78d6ba259c2dULL, 0x2ee1677a69902079ULL, 0x725b35b475a56ae0ULL,
	0xb3b4beb9f6cf5e41ULL, 0x4eb0d1dd6e77c3dbULL, 0x1a168ee772d1a66cULL, 0x20e9e0b698e62d5bULL,
	0x23b14bc01f52dd95ULL, 0x34551d1097917b35ULL, 0x760351d4bbeb4de1ULL, 0x763b4e4f515ced70ULL,
	0x48bab39d407e73daULL, 0x56805be0a7e2f206ULL, 0x7d5bacaa8871ba68ULL, 0x53f85016c9c6c84fULL,
	0x2e28eba0d711f12fULL, 0x3267ba6be4e8cabfULL, 0xee24000ffaa39468ULL, 0xf7c31c868929d64ULL,
	0xcfb396748eb38f23ULL, 0x739bf639f7344120ULL, 0x1c3bcfa22a5ce777ULL, 0xd75c794001aa8edULL,
	0xd30d2e4d72b4b4c0ULL, 0x4724a4c7fc8cf1c0ULL, 0x63705485a8cba7acULL, 0x52220ccc67232abfULL,
	0x1a52c4bfd63cc05aULL, 0x2c00b1998c9e37f9ULL, 0xd2b9186ce2bc78fbULL, 0x59aedb38626423caULL,
	0x4386f2389ad542bdULL, 0x48ceef70fe850b69ULL, 0x3df1dea21d4141dULL, 0x63250a186122ab0dULL,
	0x612cf4f69d4dcca1ULL, 0x22bcb6a033b55434ULL, 0x66bbd83a982c434aULL, 0x575ecf4e617e2b39ULL,
	0x4bb9d97d7c60323aULL, 0x3617a9a927fc9402ULL, 0xd20472bd985d4746ULL, 0x75bad98d903f4a18ULL,
	0x3d34678dd21107f2ULL, 0x2525f1d7069a47a6ULL, 0x21dc4a751428bb2ULL, 0x3bb4a8cee53bfce9ULL,
	0xa54acb8cd37455c6ULL, 0x1404c0b53a6be025ULL, 0x57af0367c59a19a0ULL, 0x33db0cbefbc6e763ULL,
	0x309c4dfd14ae1bffULL, 0xce16b43f60d1b63ULL, 0x4fb11ca9a0a5312eULL, 0x133778c4f6e3d6f6ULL,
	0x2b58ce195eae31a0ULL, 0x5ca4cfa0767c19ULL, 0xba8fe240c44097e4ULL, 0x59de217b2f80921aULL,
	0xc7d6fd2366159305ULL, 0x1d0daae3b8dfe283ULL, 0x1bbf65db9c7db8f3ULL, 0x49233b1c012d9898ULL,
	0xfa7a8f6b5467193dULL, 0x44b03ee07346c706ULL, 0xc5a2afd03b45f16fULL, 0x477516dd18d7a5f7ULL,
	0x2ba7f65f0096be99ULL, 0x4d8b7ee618b8e4bdULL, 0xcc6801d693606248ULL, 0x4a5b92559bce21e8ULL,
	0xf925da0e81fb51fdULL, 0x449a0307e6c3ffc5ULL, 0x80b7861434c5dfeULL, 0x6f4dde01dced436ULL,
	0x4c391b955a1cadcaULL, 0x545bfb6cd4a68e74ULL, 0xc72817470d6ad13aULL, 0x1ac74a4c2f9d6316ULL,
	0xdf38efa9bd999155ULL, 0x4b13f7af74332ba6ULL, 0xcf615bb83e3b2539ULL, 0x2e6b9bcc1c18260fULL,
	0xd688056dfbca50a0ULL, 0x7ebd3057e425dd4ULL, 0xa2a00d7d20ca9fc7ULL, 0x3f6eb5b2208a367eULL,
	0xb22b562c418288fULL, 0x2aed1dc38d260779ULL, 0x5fc3e99214643604ULL, 0x7fe2425b14059f5dULL,
	0x615faaa087e9df1cULL, 0x64b8c4b40927818ULL, 0xaee785e68d68d65ULL, 0x38ee1c561f586c6ULL,
	0xbe2d7c1bfee7863eULL, 0x526df114871e21d1ULL, 0xda6cbc6e596eeabfULL, 0x43b69319e3cd8902ULL,
	0xb19243c6068e1e5eULL, 0x3a7c0dbf53b2985fULL, 0x508f6241983aff0eULL, 0x493e41b57804d743ULL,
	0xe152dd7783950879ULL, 0x102c6b028f0284e0ULL, 0xde18ed638cfd1693ULL, 0x437ec101ab8fb823ULL,
	0xc060b9759f3d2165ULL, 0x2f99a33284f8c3ccULL, 0x6e540687e6a38884ULL, 0x2c52c015a6ccb714ULL,
	0xc83ce7ce928b7942ULL, 0x1ff3a207d8b9208dULL, 0x66885f2bb8398b5eULL, 0x52646f1561c8506fULL,
	0x2e4b23bb2b63b02cULL, 0x692cde3b4cc12011ULL, 0xfcb8c7f7a9de7da4ULL, 0x394d8e46c0c8f6a8ULL,
	0x25a9291eb8e9ab41ULL, 0x7e5ed107c06cc2eeULL, 0xa19b7efeeb4d095ULL, 0x4e11b42b6f258894ULL,
	0x61fbc3e129db6601ULL, 0x3dccfc5e7b4ee7deULL, 0xbb88243eed14ae3ULL, 0x6686670924318199ULL,
	0x8ccaefbe1e4a8b6aULL, 0x529778db43ba3778ULL, 0x3d405a9111c0bccfULL, 0x3834abc075fce9b5ULL,
	0x8d649e50becf3db7ULL, 0x1fdee70b4b55e59eULL, 0x6b6a28c1d4d63483ULL, 0x7c0befac0404bedaULL,
	0xe368eafe6a19972cULL, 0x3e3e3ce750fc5df6ULL, 0xf1add7441a569fe1ULL, 0x33b31c08636cc350ULL,
	0x66b9a9601eff954bULL, 0xe37cfc472122cd5ULL, 0x6f1ba07542c4f1f7ULL, 0x7ea6fda1641114baULL,
	0x68d7e5790e151aa1ULL, 0x2fdf04469b0dd8a5ULL, 0xc91138e0b6e856ULL, 0x5f0c7060c5b25987ULL,
	0x5f8ec5c74657d314ULL, 0x3df6464084da2c70ULL, 0xf2ac92755268971eULL, 0x4758d46e869d6f06ULL,
	0x3d9727d5dd3ccf7aULL, 0x276fb63839f771e0ULL, 0x76a73cf94313c6d8ULL, 0x35acd02301aad9a1ULL,
	0x287c527092697479ULL, 0x58d1cdd453ed5702ULL, 0x5ee2cd435601285eULL, 0x4bac51e321a514a8ULL,
	0x4d640f6ce9ae5484ULL, 0x379e2cca88ab8755ULL, 0xdcb8aefc0126e8b2ULL, 0x7953a5020f594f25ULL,
	0x605af7e3de7a0f1aULL, 0x6f7cded248847d5cULL, 0xf271771726db59e1ULL, 0x44a9db401fa5156cULL,
	0xc557dc643ef7be9eULL, 0x2fb471b94d4a94f3ULL, 0x966b6b86f9754c2ULL, 0x6a2a4020ceae5a00ULL,
	0x603cf10bb26e84baULL, 0x7c03bd450f9a84f8ULL, 0x81f9706c5629f97eULL, 0x4b5a71e1080edd98ULL,
	0x3ebab9b9354c1fe2ULL, 0x4bdeae6a599cd615ULL, 0x23d30af96986df61ULL, 0x46c70b4c1a8b60fcULL,
	0x2857341f3ed28792ULL, 0x3a4031e03c88c0deULL, 0xcc80a903f24313aaULL, 0x4f8ac4cd047481bfULL,
	0xe9441d0ff4384450ULL, 0x51590d64172607eULL, 0x50856424c4a8291eULL, 0x28367a0dbe0d7b8eULL,
	0xaa7048692125b7d9ULL, 0x2fd14a173be6b7c2ULL, 0x36da5d281ae4e626ULL, 0x365341dbdf7db8a8ULL,
	0x33ae639ceaea083cULL, 0x3ec3581c6c640547ULL, 0xa36f3909b7790e6aULL, 0x348ba8bfe82a6f9fULL,
	0x9a26f4386675bb96ULL, 0xe1d66a19b907754ULL, 0xa87f990d0f27b18cULL, 0x690090d8ce066b5eULL,
	0x4a097ca377892c2eULL, 0x67707536f5d3af13ULL, 0xdd4264f6fb26a641ULL, 0x7a1f87a83161747fULL,
	0x68ac34da7fe68e75ULL, 0x4eed5e3bdbaf26c8ULL, 0x59fe2a8145009178ULL, 0x60df2892fe96f3a8ULL,
	0x95f46e8a17a83feaULL, 0x5b246677385c3760ULL, 0xa23ad9d161184676ULL, 0x76242fde093367feULL,
	0x7f033316e8d673afULL, 0x4258141da6f0aa61ULL, 0x3d63035ebe6036e6ULL, 0x23aeb03d76809cd4ULL,
	0xb06692218356ae1cULL, 0x7400c6f9f354fad1ULL, 0x4eb029173e01d6c4ULL, 0x12c42151b4f1d639ULL,
	0x55d6277e09f3475eULL, 0x5ed189be4cb08d1eULL, 0xc8eb0e31e185b8d4ULL, 0x162ba6565bdc2908ULL,
	0xd0b15b1738a279faULL, 0x722c932152c633f1ULL, 0x29764f2eda6eca0eULL, 0x27de49a882b61d1ULL,
	0x12a82abb3f6f407ULL, 0x7934c5adf9ab4bbULL, 0xa6ea34cd5e2a8371ULL, 0x672e5451861ef92bULL,
	0x6ad15915153eb798ULL, 0xdff2552d8294ac7ULL, 0xa9bbe7c0ea3caf7fULL, 0x3c660036aecafa6dULL,
	0x7d5811d19dbac73eULL, 0x74ee021e03b3fdefULL, 0x1373105aeff556a6ULL, 0x558badb1c63b8559ULL,
	0x781ac15269679458ULL, 0x23b8bb38f80146cfULL, 0xad856b863f77ba18ULL, 0x33b8ed5efa074bd7ULL,
	0x2bfbd4070df4c23fULL, 0x3d22e34dcc18e97eULL, 0xb03b440a53cbba34ULL, 0x217d18529fc974ebULL,
	0xa886a310cd4ad444ULL, 0x2c7a3cced4c23f10ULL, 0xb3d5843223524f5ULL, 0xf5c5e3e0614871bULL,
};

static const u64 PRECOMP_TABLE_1[] = {
	0x2cdbb43cb733bULL, 0x710b36b05fdbae09ULL, 0x88152345d28369f9ULL, 0x62689c901a4c8229ULL,
	0x3b5cda29d163fb39ULL, 0x15d42ab1a37df6e9ULL, 0x780e9541c2c13d00ULL, 0x5872d550ecdb1d12ULL,
	0x2cdbb43cb733bULL, 0x710b36b05fdbae09ULL, 0x88152345d28369f9ULL, 0x62689c901a4c8229ULL,
	0x225ef3219884ff7dULL, 0x2e9c445c05ae5635ULL, 0x55bf2ab073eed2ULL, 0x2b53536558d4a3b1ULL,
	0xe844919d66e84c0dULL, 0x21f790e8cd84acadULL, 0xc4ee1f3f33f091cULL, 0x7183d4eadce0eb0eULL,
	0xcc3adb505cb4c5dULL, 0x13a248e922c93316ULL, 0xf3719b0725389ea3ULL, 0x6df5b8182aa83783ULL,
	0xc9ac7e85ca3982efULL, 0x18b442e65f5ff87fULL, 0x6d2c58fda5f57474ULL, 0x251febfa5c0b983ULL,
	0x1d10dc7605365886ULL, 0xef9fe72e3951151ULL, 0x7956efc9e938d9ecULL, 0x620238df0dc5bb39ULL,
	0xaf2632a0c8ac7ef5ULL, 0x42b3d081ae75c17cULL, 0x7e6a7b855bfa035cULL, 0x54015d8d3e607b4aULL,
	0x778fcc9e7f3c6d21ULL, 0x215b26226c741cfcULL, 0xc493a2e65db863adULL, 0x1f3d2b9deb6906c4ULL,
	0x3b5ab866d74e7702ULL, 0x6f6a384139e06db6ULL, 0x7512ce8f8ec845caULL, 0x4c308ff8104d85bcULL,
	0x8db013cf42faa0f7ULL, 0x3488b071d6f31fb2ULL, 0x56ebf070d786f702ULL, 0x12f2ca99114e4db6ULL,
	0xd8bc3e6723784420ULL, 0x2c65b90151975788ULL, 0xd69aaccc343b531bULL, 0x2e8740ede30f97c9ULL,
	0x6d69c2f8fe19fc6eULL, 0x65df477b1d914e04ULL, 0x3469cb55f069024fULL, 0x180d527962f5e198ULL,
	0xd56f65913cad9abeULL, 0x463c6cd4bd4f5d4cULL, 0xf2919f6633ebc294ULL, 0x47143a13c036f3acULL,
	0x8f62111a86e7d15fULL, 0x4be38f61485155f3ULL, 0xb7c2b3eee5b1b42fULL, 0x3d8b65c3ae9d4948ULL,
	0xea16edc1ee8ca633ULL, 0x4e7eadb0815a1fa9ULL, 0xe5dcae87326e8f3cULL, 0x3c63885163ec5473ULL,
	0x7ade81338b1dea50ULL, 0x677208a27424566bULL, 0x630dfd7d0c60e77bULL, 0x5cf46158472754a9ULL,
	0xf608fba5e22650eeULL, 0x7105dd643aa993cULL, 0x65e56d8e77dea596ULL, 0x466d9642249f1a6aULL,
	0x9b5fb80a39561dc4ULL, 0x68f3fa049e6bfa6bULL, 0x72015da89ea48fcULL, 0x3843f076286a5e6fULL,
	0x10631bbdf399567eULL, 0x79aa46184a2fc37eULL, 0x18008b68ba57ab73ULL, 0x2f9eb2d8be3ec435ULL,
	0x9ddf9d8b03172c17ULL, 0x1666ee64a24aaa98ULL, 0x9f0630749ec385f9ULL, 0x1b0bb341f0afb150ULL,
	0xe23fa288e349d8d7ULL, 0x1da9b6df96e98e18ULL, 0xc481e9f5dbb2043ULL, 0x239107b224620024ULL,
	0x371d515a776270a1ULL, 0x754903ff76be6fdaULL, 0x93dac9a2a83c44a4ULL, 0x118da8aefaacaa1eULL,
	0x5efe40c79eef0235ULL, 0x513ae20e65d56f53ULL, 0xe5fb340fad07e3c1ULL, 0x59bef15055d4a5c5ULL,
	0x691b1adf75ab29ceULL, 0x235b51ffcd8a6222ULL, 0xbbec6dce9faf4e62ULL, 0x3c94c68033c8df5ULL,
	0x9a71854a7c00d1f1ULL, 0x1f26de7647880c19ULL, 0x7b46a030afe31e46ULL, 0x25465f0832ea8fa0ULL,
	0xb264e0f07e314ab1ULL, 0x4e28e8b523d82afcULL, 0xb084cec2e674a48aULL, 0x44bea7c02a21f1dcULL,
	0x84ddd0097be1b78aULL, 0x15301c4323e41964ULL, 0x6bd4254bb8735b6dULL, 0x529e00f2ce6e60a7ULL,
	0x17fe2cd18773ed4ULL, 0x59e09728b06db10cULL, 0xf11ef014a5eaa551ULL, 0x5df46b881b21dc84ULL,
	0xfbe61eb8aa8552a6ULL, 0x7ba568296ff14a9fULL, 0x5a57550f8058342ULL, 0x20989412e66bb7b1ULL,
	0x3a169ad09fa71411ULL, 0x7a93f1503707477dULL, 0x3e2d8946d6a491d7ULL, 0x4ea64eb08bad09d7ULL,
	0xa8712528d7d8a7fbULL, 0x6ceaaedf8a0b1310ULL, 0x1ac4c2b1f1f93f82ULL, 0x1084098897b69ffaULL,
	0xbd74705d6ede280eULL, 0x559f046ca472de44ULL, 0x374dc49508cdd6c1ULL, 0x4efb34a70cf85c41ULL,
	0x46d559b13a7f61f2ULL, 0x648c92fda823f1a5ULL, 0x979271fe7259b7deULL, 0xa40afb21ccbfe92ULL,
	0xb787269739b96b98ULL, 0x5f6e3d3949e6be7aULL, 0x2cb6ec070c496c31ULL, 0x221a9a7546093872ULL,
	0x5620bfbd804b0d32ULL, 0x1d9f6c1fe94e3fe5ULL, 0xd31ab67a7d763043ULL, 0x91e5fb621e40d84ULL,
	0x6c4b6132cfe719e8ULL, 0x1404df1bedf50321ULL, 0x1c4c4711043c46c6ULL, 0x21a83236d9903548ULL,
	0x9893e0bf5f8927d7ULL, 0x5100df3e8874d936ULL, 0xc7535424e9033181ULL, 0x3466db3bfa2a7603ULL,
	0x51f5d63cedaaab2bULL, 0x68e4c03a313e824fULL, 0xb5d537dafd3e310fULL, 0x385af6f632527c22ULL,
	0x667e9dca950ce491ULL, 0x7a6b69069493d065ULL, 0x3c36e663b4baabULL, 0x4abea2ec92c44b59ULL,
	0xdc7ae89e283172a0ULL, 0x311bcc15dfd0c4e6ULL, 0xb9f2f0dd032b0eacULL, 0x2d82ba8ba3406598ULL,
	0x2c76bf1c7b980613ULL, 0x6d94b3f938082b10ULL, 0x8f07b274be31122ULL, 0x650e421659697782ULL,
	0x92509f6f1c72c492ULL, 0x65bb56dac227f035ULL, 0x50fe2ac72fa9be2dULL, 0x6ac5f4c988ac01e2ULL,
	0x40b59e926f7ba60fULL, 0x265af6e04ea83cc2ULL, 0x661d1edf1bdac5c6ULL, 0x16066dfe7ab608b5ULL,
	0xd13ec61e2a1b37c0ULL, 0xb7fac6cc57a2a4cULL, 0x236c8f53b622e7c8ULL, 0x530fa2c4a3ac440ULL,
	0x2ab447db4dd7beabULL, 0x27c8352e99fdd55ULL, 0x5287f3b90329e16eULL, 0x496188aac715c6ebULL,
	0x73a39ad65e5b0ea0ULL, 0x50515d54f4a4338dULL, 0x6a45d67270415a4dULL, 0x509bc06c30614393ULL,
	0xfaeb54d914859580ULL, 0x4d9d1d128fae162aULL, 0x26715287ddeea036ULL, 0x2b728998b8ec2621ULL,
	0x8961602ebb10e14aULL, 0x6e10e1f9763205fbULL, 0x25d5046a58d05364ULL, 0x6c3ad217bb3cfdfULL,
	0x3ed4bb914aa370eaULL, 0x56c9e5a8c39daaa3ULL, 0xcdb26a284e9a338fULL, 0x44311cbb77fc87c7ULL,
	0xbd780dd62899c2c4ULL, 0x283552d379aa1a0eULL, 0xcdfbc2a5a6f5b494ULL, 0x5f6391fbd1b47e7bULL,
	0x1dea1249e1e5a386ULL, 0x279cc4e9ba070098ULL, 0x487c0ad83d4ad569ULL, 0x5103777b43c4baabULL,
	0x1183e1966ab9231dULL, 0x5d0c53dac6378ea6ULL, 0x80e47c340eaa3aaeULL, 0x315ee4f4dc212f65ULL,
	0x758a3eeb62d73dbaULL, 0x40e71f8b03395069ULL, 0xbc4bae4353228b50ULL, 0x65e719e7131e4c8aULL,
	0xa728738b2f415613ULL, 0x49e47e8ed1bad04aULL, 0x58bf1bc4b080c21bULL, 0x714221d3d6f8abeeULL,
	0x1e8f259dab5e0a03ULL, 0x4dca98eddae8ceacULL, 0x488ccf7ea189e5eeULL, 0x306108285b09e7a8ULL,
	0xdd8d4810db5fba48ULL, 0x54eaed39d8185b49ULL, 0xefc580785fd91011ULL, 0x4e1edfa6b91bfe6ULL,
	0xdaf82c40993ea433ULL, 0x31177f6d3e674c4cULL, 0x384a49dca15d4e86ULL, 0x6abb922d7f9fc8feULL,
	0x626be3dc7da5e98cULL, 0x28a6ca870712658fULL, 0x5939594ed1b07f94ULL, 0x4b84a540ce195f30ULL,
	0xafca579833d02af8ULL, 0x7d44d3e5b7c6c689ULL, 0x98631fb33fc00e36ULL, 0x7d9e1b69cae50036ULL,
	0xf4a2c21faf19c726ULL, 0x780b14546642dc62ULL, 0x860af91f746ba1e3ULL, 0x346c2dc36d4875cfULL,
	0x627e22e7794bb7ecULL, 0x492caad0542d9f86ULL, 0x11d25ca09e3a246aULL, 0x2b893817475147deULL,
	0x929fbaf20dd9787cULL, 0xeba8f1d459ba4ffULL, 0x85a34d5809090128ULL, 0x20ebf03022c178e1ULL,
	0xcfe10def3d2dfa9bULL, 0x74d34e04e9c16e7ULL, 0xd8c11499210a5c93ULL, 0x6862d04834e298fcULL,
	0xe1ab0614230d6524ULL, 0x1ba463b0a2dedb71ULL, 0x53b6a85946791282ULL, 0x1a785eb0514c945ULL,
	0x235cedcf5103811ULL, 0x4fda860f681c6f27ULL, 0xdd0838a686b9c683ULL, 0x176fd02b9fe4c63aULL,
	0x789f916d6dd2ccc2ULL, 0x134dbdf53fd3639aULL, 0xbd62cf478adba089ULL, 0x728a157a22d1de2dULL,
	0xd95326fe31d1ea1ULL, 0x214d567d3d33767cULL, 0x56eb97e8a2461321ULL, 0x79de2c9fa1701625ULL,
	0x117166cdae789429ULL, 0x5b83ea4dadb93b3ULL, 0xad17695954bcc3b8ULL, 0x441cbf2b10e37b65ULL,
	0xf7f6fc55899ca7e0ULL, 0x5483de12680c5807ULL, 0x3306d93bc61a9423ULL, 0x79756fcb11743b4cULL,
	0x1d0c5e97900ff6c0ULL, 0x7c8c6bb4d6f502c6ULL, 0xa07e8933feb5c640ULL, 0x4e91a41901aa85f6ULL,
	0x64772b79d7cc1fdULL, 0x3a25497756c11a25ULL, 0xbf27e152606161dbULL, 0x6fe887944578e4daULL,
	0x705f045041d6ef47ULL, 0x66aa371228910856ULL, 0x4cb092f6bdbccb99ULL, 0x2fc2a958b96fc876ULL,
	0x6c7aad22f001cfdULL, 0x6e37c3a31cc61547ULL, 0x3c4f4515875e568eULL, 0x35d87f7474f94cb0ULL,
	0xc78ae7304cbe6ae5ULL, 0x5a9b4169ef9d2c6cULL, 0x2465bc24118a8963ULL, 0x766bb1923679f9f9ULL,
	0xc7d41da8ccef45aULL, 0x645ca756a1442648ULL, 0xb37eb83db3f3ca3aULL, 0x5e3d09e5d2847475ULL,
	0x39b953368ecff2e0ULL, 0x620e6a2703a3c7dULL, 0x5079e64bb128ac5aULL, 0x30153503670f5b83ULL,
	0xd4ffd2f5f733efb2ULL, 0xe8fa435b85230dcULL, 0xd1b5dbf2e5699256ULL, 0x1bdac47f796679f1ULL,
	0x621ca00a2ca81df0ULL, 0x382263fe6f10cc83ULL, 0x319f0cb68d276969ULL, 0x61ac05005c664d61ULL,
	0x4f81e640e933eb8aULL, 0x2d372b0880983702ULL, 0x8748de2a33948e3cULL, 0x1068ba495f03d9c3ULL,
	0x2af1c5c89587515bULL, 0x70a840fc88830adbULL, 0x360ef575af485df7ULL, 0xf995b6983575423ULL,
	0x8347293217e7c182ULL, 0x602566b729df7c37ULL, 0x6ac99d3d79c69102ULL, 0x2dae3347af624ec7ULL,
	0x4ed33a7364b2d138ULL, 0x3af40ee623fb56fcULL, 0x2b9bc4f871836749ULL, 0x2e02cc60cbec49ULL,
	0xed37b9ba76ed4cdfULL, 0x5d0003748fe8ae63ULL, 0x2d2989577282d8a6ULL, 0x58255902e5892390ULL,
	0x7a905702643792c9ULL, 0x43d903ef390d5707ULL, 0xa6e07ad0f6dc983aULL, 0x5899b0ece1e61569ULL,
	0x29004366219ae2dULL, 0xf9c359cad4ac8b4ULL, 0xb5ee096dbeac66edULL, 0x1b6b4f8bad8559c2ULL,
	0x5622350146054ef9ULL, 0x6ce339c07c42c241ULL, 0x97b91db34b4a0f43ULL, 0x51d448d28cba3679ULL,
	0x82c26e12625fdd83ULL, 0x69aff14656dc7502ULL, 0x49b5e21590a82c6eULL, 0x79ced7a22d3457a5ULL,
	0x91fbe4f257e775aaULL, 0x6836a24a2b811fdbULL, 0x7c3ec9298007a670ULL, 0x1e5cee7a5a62cbcbULL,
	0xc3465d8113724a04ULL, 0x6165da657be9c5c4ULL, 0x964a2f7ff57f4d16ULL, 0x5a2ee1a59d0c2bafULL,
	0x850d9139054a0eaULL, 0x1fb42b0e298af17cULL, 0x974715807cc8e2d5ULL, 0x595feaf4d6fef2c0ULL,
	0xde81e75cbc0b876aULL, 0x1c715427ba557b7eULL, 0xea100f1a74f8c1e9ULL, 0x7b1e83f2850252f7ULL,
	0xdfd508eef9b7e2e1ULL, 0x320feee853977188ULL, 0x6770dfa87da362d7ULL, 0x487695290762e4d0ULL,
	0xa4adbffa8894b10dULL, 0x3ff0ec69d0e82363ULL, 0xb9d43572cbb73a6bULL, 0x105e056966a49d4eULL,
	0xe5f9e3db8e083089ULL, 0x47ea01ec2aa77f3bULL, 0x4a8424530eede9fdULL, 0x5e1acc1859c0c03dULL,
	0x8e27ec48d4d9baf6ULL, 0x7cbe87848c094668ULL, 0xeea06d09d72dc4bULL, 0x5c46e1b4a5aa377cULL,
	0xab6c190590deaa20ULL, 0x31226c22ae99951eULL, 0x7cdfd56dc1b2d153ULL, 0x5669b24e6a3d6a8eULL,
	0x8283097d3559afacULL, 0x25634089aa13eae1ULL, 0xfa2782b9a6c9ac29ULL, 0x5911b37819ce0f99ULL,
	0x4615865bb20a59afULL, 0x4c55eb949b05af05ULL, 0x51f8d056f49800ceULL, 0xece3722c00c2fffULL,
	0x66563173052d6ccULL, 0x73c9d0381f1010faULL, 0x1eaca1cea3da9d1aULL, 0x63ad75b73c545b56ULL,
	0xfd3cf620ccda4874ULL, 0x23d900289d09d1a4ULL, 0x9c754635299c1440ULL, 0x77924cec89b79674ULL,
	0x4e17ba08bfda0545ULL, 0x324972b7ae3da6a8ULL, 0xea9a2b87e06976caULL, 0x6a46be4767e8fc5dULL,
	0x81c276124f0dddc4ULL, 0x5d5868789dd9c534ULL, 0xb63ec69196f41568ULL, 0x3f5825691fa4b1ddULL,
	0x2f4a56808c8b6846ULL, 0x17ee4b9128975651ULL, 0xc8446bf21cc17602ULL, 0x4d516649d05e44c2ULL,
	0xf0d829e189a07922ULL, 0x390d6d0da240e5a3ULL, 0x3c4b092cac25f39eULL, 0x10601cc053f5412eULL,
	0xce287f7451c5de41ULL, 0x710e6bc00774db0cULL, 0x1a264149130018efULL, 0x23c01c05cca88f58ULL,
	0x70d193ea4bcbe2b3ULL, 0x5296aebdff0f6da3ULL, 0x90338823e1fe7811ULL, 0x592ca37548c52e2aULL,
	0x1bd38ed83b4d5ce8ULL, 0x5d7202c5f7f375e6ULL, 0xe4c377fbf2072b90ULL, 0x33f616165a4f27a7ULL,
	0xd9e9c96a6f9b8834ULL, 0x4e5aabbb1ac65af3ULL, 0x416a3c13cb79c6d9ULL, 0x33b3180d7dfb0eddULL,
	0x8d028c1b3ac366a7ULL, 0x2bb77489344263cULL, 0xee87b102bdae044bULL, 0x698ba5df7bf8afc7ULL,
	0xb438daf47a08848fULL, 0x193ef65b082d679ULL, 0x5088d8649ba9bf4cULL, 0x4e35bade100bb8edULL,
	0x98b25a88443a1743ULL, 0x7cbe1cbedd6d11e1ULL, 0xd74f0dea89e94d06ULL, 0xc4f835cb1310d1aULL,
	0xe0c2530a6e9dfe99ULL, 0x275426e04995458cULL, 0xfa421945812182c7ULL, 0xcfb640774934873ULL,
	0xdc5bbe9d1fcedb92ULL, 0x38c787a48d7cdd32ULL, 0x482238c153093ddbULL, 0x4af164b49b1aab3dULL,
	0x44923acc5811f0fcULL, 0x71af781f10326256ULL, 0x3732e02b6395f8a7ULL, 0x7b695c9aa34a2031ULL,
	0x1325ce3c27ba9a6eULL, 0x5db7aa92437195c6ULL, 0xadb14d8da8c5c9f6ULL, 0x459d4d87b6cdb81fULL,
	0x2a42734dfd715fcULL, 0x53595d3fd93ea3ecULL, 0x9a6a5b873a77d511ULL, 0x488c7adb7a774f73ULL,
	0x9c40f6562bebc0abULL, 0x6fe76030ca243eedULL, 0x481a57429723680cULL, 0x68a835fb935f150dULL,
	0x3c6c3fa6c3048fa0ULL, 0xce9437ebf7ffc6aULL, 0xd4632bac6fc39897ULL, 0x4d0c65d12e965541ULL,
	0x95c6779b29d078ULL, 0x26e42d3e4e713683ULL, 0x9444d2c58d7748c7ULL, 0x651f8a215452a600ULL,
	0x5171e4d2a6fb2592ULL, 0x608df13e710eb842ULL, 0xf1dde0c1586bf8ceULL, 0x79dc61ea724c63e0ULL,
	0x531deba791a16ee1ULL, 0x62477d22d8011bb8ULL, 0xf052e8e52e9d182bULL, 0x7b78c9c766ec8c73ULL,
	0x55f05e4fb49350ebULL, 0x2064af3435f77f15ULL, 0x561c64f021aaf934ULL, 0x588ac21c6b1676a6ULL,
	0x10833ad76dd5528cULL, 0x73bf2a831a363d4dULL, 0x745d7ac3d92f0ea4ULL, 0x563f60ca0586be43ULL,
	0x754559a877555a92ULL, 0x2f6f33a76d38e981ULL, 0xb8b6ae6d6db05682ULL, 0x56866916aa3c60c8ULL,
	0x1d25762ac2ff3013ULL, 0x46be55de825bfa74ULL, 0xa6d718c57bae225ULL, 0x68e7ce42d4d4b94aULL,
	0x657fc46f577094fcULL, 0x57f66753a044f2acULL, 0x8e1a328a7986ef7eULL, 0x11c66e9ff0f4dfdULL,
	0x31f5b7527358f8ecULL, 0x391283087e2e8531ULL, 0x971431175e57bea3ULL, 0x47400ca1a9ad4c60ULL,
	0xff7cf2c418af6365ULL, 0x40accaf6bf957a38ULL, 0x1d1ea99a7f1e7e10ULL, 0x642bedc705a1f7edULL,
	0xac8ca1c9184ff7d9ULL, 0xd08a80be64a6af8ULL, 0x7d916b6a152bded5ULL, 0x1e67199fae3f5695ULL,
	0xf74f362f32328fbdULL, 0x4a2956b58080e6fULL, 0xedf6dfc736a128e5ULL, 0x76c220bc7757d6c9ULL,
	0x6422ca6e542a865ULL, 0x5151c3e50ad4322fULL, 0x6998c4eec7c702d3ULL, 0x6c5e51b1f6d6bc38ULL,
	0x96362d80b3805bceULL, 0x347496b4c047d165ULL, 0x85294cf0476ed19dULL, 0x67fbea867a547192ULL,
	0xd6ff5cbf5d26c8b8ULL, 0x467032d75437b4d1ULL, 0x4b192d30a25ba916ULL, 0x12b947ff21d3edbULL,
	0x7c686b5840a11ce0ULL, 0x77c350574e84d468ULL, 0xf0ffee581b2e739bULL, 0x104b65de6c2c8e32ULL,
	0x60a196fce82feb4aULL, 0x6f930ce4368fc0d5ULL, 0xa0a20c1af82635a0ULL, 0x2915e127e11bc0dcULL,
	0xbd4bb535ee57db9bULL, 0x5c54d38e5f45874bULL, 0xe86a136905458e25ULL, 0x3a1a1915e89b8869ULL,
	0xeac5973607decf9aULL, 0x72be92f22dcf15d4ULL, 0x5d7e8b3aa95c3163ULL, 0x1053adf2f3c62972ULL,
	0x95062a25535706baULL, 0x136bc409be61821fULL, 0x333b8d8f8d291cdcULL, 0x4f577b6241b90cf3ULL,
	0x7d3c75a3d41ba64dULL, 0x13a4a6df95998a43ULL, 0xd58dc1615093135ULL, 0x37a840a1890dcd1aULL,
	0x8367f37d57f80ce1ULL, 0x4427f4a8fafc8f53ULL, 0xa5fb22f79087c178ULL, 0x22f20e8027ccd586ULL,
	0x38526a322479e791ULL, 0x585f6c159a751418ULL, 0xa18b32f9553edb66ULL, 0x70908296ab0d2946ULL,
	0xe8af7958b8b67eb9ULL, 0x6fc2166d275d4035ULL, 0x9df521c2a62f714cULL, 0x1cf48a1028a65b49ULL,
	0x9f75a3b37dbdaa1eULL, 0x357894ada839702dULL, 0x612faeb2d037ffd0ULL, 0x353d89edeb1b204fULL,
	0xbb433b3c953bf9e5ULL, 0x73950f561a570393ULL, 0x14c3bf8ffc4ba5c2ULL, 0x100ac5f1877b5a4ULL,
	0x81bb41dd5f992acULL, 0x3d44a72adc603933ULL, 0x1b69e73b8495ae19ULL, 0x7ab3091b07101d8aULL,
	0x4927fc61052ccb08ULL, 0x726009c1f23e928aULL, 0x33b640945146c1daULL, 0x4ea6c8a5492c3ecfULL,
	0x3694af2cbc7149f4ULL, 0x691330df6e4ad787ULL, 0x5d3be2bfd7153f8ULL, 0x56b162fbabae62f7ULL,
	0x1ab12c61a58f0fafULL, 0xd485b1b3ee04fb2ULL, 0xa181fb2486edfca4ULL, 0x4527aa0a8e25590cULL,
	0x52d8433a139a4765ULL, 0x6176eb1b26e2c207ULL, 0x652b469313f2d3b6ULL, 0x794339e859b452e2ULL,
	0xd6ae81a85f29c793ULL, 0x29942b6c9cf03f72ULL, 0x902df2a26eb3b4f1ULL, 0x11caba845b752fc8ULL,
	0x28a049e3b0e6e074ULL, 0x20a609319273124fULL, 0x193a164700473865ULL, 0x519143e4676ac92fULL,
	0x70bfab8f24f2cd38ULL, 0x4ff53b2e3d13bbb8ULL, 0x131e3fde539bb954ULL, 0x2569bd08889c371eULL,
	0x416ba874f701431aULL, 0x70ed79e6adc17314ULL, 0x7a4bcd93ca666fb5ULL, 0x4e748a466fd8a361ULL,
	0x2aa00df8138e98a4ULL, 0x7a1368f491850644ULL, 0x20adfb56c8807dacULL, 0xf7569998522c102ULL,
	0x178fd1bc5bb396f5ULL, 0x6c4d199a355961e4ULL, 0x244237f1f3f59367ULL, 0xa4be4200e73e435ULL,
	0x99c5b534c62a8d08ULL, 0x6ec81689ff421ULL, 0x6eb463cc78e5b693ULL, 0x8ab483ea33e2f4cULL,
	0xf7cff427e4afa7feULL, 0x4f298121fc80b26ULL, 0xe1deef6deb10fe92ULL, 0x737df612864eb759ULL,
	0x85e74de3a1867912ULL, 0x9968b29cabc4591ULL, 0xbf3d7118881f1f70ULL, 0x5f3a9d8b58fc6437ULL,
	0x1d80e5ae9c31e621ULL, 0x7d5ff0e992e1cc58ULL, 0x4663e7082a7240c3ULL, 0x1233bfdc69e1d104ULL,
	0x2700fd031352d232ULL, 0x31657c69cc677886ULL, 0xffbd2bd9ca275baULL, 0x506ca749a7ffde0eULL,
	0xc54303930e8eb167ULL, 0x59542c9562b576e3ULL, 0x24835b4a6346c5d2ULL, 0x115a9fc81482141dULL,
	0x112eca8bd0da0088ULL, 0x58fef195362b80fdULL, 0x4de1999a627c59e7ULL, 0x6dedd5ea8cb28707ULL,
	0x3e0f1a4f0e5612d7ULL, 0x693e4b62c190225dULL, 0xedf33c5734c135f7ULL, 0x7215d0afac33a718ULL,
	0xcd739ecf12ac76bfULL, 0x18355cef0411828aULL, 0x4d10c3dbccfb540dULL, 0x30e64d6adcd54f4dULL,
	0x404e06811a5a5a78ULL, 0x504324e31d1b348ULL, 0xe9c5cb105ed2a0deULL, 0x11fb64f4ee68a39ULL,
	0x9296848ac87da1cdULL, 0x3934c50536c05a1cULL, 0x7addc6cc4bba0f86ULL, 0x43d2e3ee3f4aa6abULL,
	0x9f344b29de10c97fULL, 0x31b7f2f33ef675caULL, 0x33f86401a2951cb8ULL, 0xb8d2b9ea0109021ULL,
	0xa41bc927fddc0141ULL, 0x104937f3c715053fULL, 0x7ac7d3a2ddba69b1ULL, 0x1d3ad62245bcb640ULL,
	0xbda8980116c97f1aULL, 0x48e8ddadb2f7f298ULL, 0x6f1bfb4278e97d5eULL, 0x698bd985acfd825bULL,
	0x29e200df19c3fc59ULL, 0x3e96cf680418254dULL, 0x5bb2763bf672ac13ULL, 0x2d558009a487433cULL,
	0xb6d794f0ed68fa10ULL, 0x1e466e0237306d27ULL, 0x8c29fff105fb82f8ULL, 0x7fe923dda256e4dULL,
	0x2126876c88667e31ULL, 0xd90d0b20e7795fULL, 0x5723e067f8796f50ULL, 0x27617b8f4e79c859ULL,
	0x7094932c8b65ecb1ULL, 0x76c7064fedfd29bfULL, 0x81eb89324fb36083ULL, 0x296aa49f32bd2ccaULL,
	0xbc353fc39a9c709eULL, 0x9b92afcf2befba2ULL, 0x21b7271c394d03deULL, 0x867d723a493576aULL,
	0x361a38f745847353ULL, 0x19ba0f489f3959c5ULL, 0xeb6c02e4c41b3f80ULL, 0x7a99f099733d9c59ULL,
	0x7a70d0f03459a4c2ULL, 0x753f75fab7198d5ULL, 0x9885e425cf89f444ULL, 0x7a8478e2df31857fULL,
	0xaa742f9e4d26b0eULL, 0x65b653895ba2516aULL, 0xbc9eefc7f55d0ba2ULL, 0x548bdbe6710acf2fULL,
	0x3ee98643d64c6d17ULL, 0x6bce8c4af618f164ULL, 0x22d22af58b616045ULL, 0x13ab813b99c8ed8eULL,
	0x3280f9f2cd83c9daULL, 0x6a33c43c5576a96eULL, 0x58867234a942c0d8ULL, 0x2b3713abea085168ULL,
	0xbda789b730476c0aULL, 0x3ba074db26ee2e6ULL, 0x82cb9d0c819f0ae8ULL, 0x5b187276a7d7a6dULL,
	0x8b174736982d0129ULL, 0x723d6772ba6979d0ULL, 0x53aca055f6b4922ULL, 0x4f770296794a3deaULL,
	0xeea7a35a23561071ULL, 0x56831f90df65f640ULL, 0xdef6eb4bfa3ca56dULL, 0x2db48fd974c01714ULL,
	0xa2a869c4b704d318ULL, 0xd47062434ccffb2ULL, 0xa867c78fb4824357ULL, 0x16c565c1f7c811c9ULL,
	0x100681a13daa963bULL, 0x430b02f7c034b520ULL, 0x2cd3db10ffb122b8ULL, 0x3d5a293c4b23b69dULL,
	0xb65cf7cfa0a0caf4ULL, 0x1be9e7ab7565a1a8ULL, 0x9a40fbf7d0c7bbadULL, 0x5a1a86a25c0117aeULL,
	0x4a7bd1b71286cb90ULL, 0x16116c187d8768f1ULL, 0x99cf6db5370e37ULL, 0x1a20ca658386f087ULL,
	0x56cd26939e347a8ULL, 0x4299e3530a604f25ULL, 0x7ce3885fbe1919f2ULL, 0x1da32d660f993f52ULL,
	0xac032d15699c72b5ULL, 0x60dea9a5de6026f0ULL, 0xba407ddb1d07f46aULL, 0x1dd37adeb82e7b4bULL,
	0x8b1550733cd0d9f0ULL, 0x63c250f6f152dfe4ULL, 0xb5bdf8aecf3cba12ULL, 0x2fb61b2954d156b8ULL,
	0xdce7e336a7b6ab0aULL, 0x21f1459fecb41606ULL, 0xba82fc68074afe3aULL, 0x3f5bc6a43102f42dULL,
};

static const ecpt_affine *GEN_TABLE_0 = (const ecpt_affine*)PRECOMP_TABLE_0;
static const ecpt_affine *GEN_TABLE_1 = (const ecpt_affine*)PRECOMP_TABLE_1;

static void ec_recode_scalar_comb(u64 k[4], u64 b[4]) {
	const int t = 252;
	const int w = 8;
	const int v = 2;
	const int e = 16; // t / wv
	const int d = 32; // ev
	const int l = 256; // dw

	// Set bit d
	b[0] = (u64)1 << (d - 1);
	b[1] = 0;
	b[2] = 0;
	b[3] = 0;

	// For each low bit,
	for (int i = 0; i <= (d - 2); ++i) {
		// b_i = 0 for -1, 1 for +1:
		b[0] |= ((k[0] >> (i + 1)) & 1) << i;
	}

	// c = k >> d
	u64 c[4];
	c[0] = (k[0] >> 32) | (k[1] << 32);
	c[1] = (k[1] >> 32) | (k[2] << 32);
	c[2] = (k[2] >> 32) | (k[3] << 32);
	c[3] = k[3] >> 32;

	for (int i = d; i < l; ++i) {
		u32 b_i = (u32)(c[0] & 1);
		// b_i = 0 for 0, 1 for b_i mod d
		b[i >> 6] |= (u64)b_i << (i & 0x3f);

		// c = (c >> 1)
		c[0] = (c[0] >> 1) | (c[1] << 63);
		c[1] = (c[1] >> 1) | (c[2] << 63);
		c[2] = (c[2] >> 1) | (c[3] << 63);
		c[3] = c[3] >> 1;

		// c -= (b_i >> 1)
		u32 m = (-(s32)b_i & i & 0x1f) >> 1;
		s128 diff = (s128)c[0] - m;
		c[0] = (u64)diff;
		diff = ((diff >> 64) + c[1]);
		c[1] = (u64)diff;
		diff = ((diff >> 64) + c[2]);
		c[2] = (u64)diff;
		diff = ((diff >> 64) + c[3]);
		c[3] = (u64)diff;
	}
}

static CAT_INLINE u32 comb_bit(const u64 b[4], const int wp, const int vp, const int ep) {
	const int t = 252;
	const int w = 8;
	const int v = 2;
	const int e = 16; // t / wv
	const int d = 32; // ev
	const int l = 256; // dw

	// K(w', v', e') = b_(d * w' + e * v' + e')
	u32 jj = d * wp + e * vp + ep;

	return (u32)(b[jj >> 6] >> (jj & 0x3f)) & 1;
}

static CAT_INLINE void ec_xor_mask_affine(const ecpt_affine &a, const u128 mask, ecpt &r) {
	fe_xor_mask(a.x, mask, r.x);
	fe_xor_mask(a.y, mask, r.y);
}

void ec_table_select_comb(const u64 b[4], int ii, ecpt &p1, ecpt &p2) {
	const int t = 252;
	const int w = 8;
	const int v = 2;
	const int e = 16; // t / wv
	const int d = 32; // ev
	const int l = 256; // dw

	// DCK(v', e') = K(w-1, v', e') || K(w-2, v', e') || ... || K(1, v', e')
	// s(v', e') = K(0, v', e')

	// Select table entry 
	// p1 = s(0, ii) * tables[DCK(0, ii)][0]
	// p2 = s(1, ii) * tables[DCK(1, ii)][1]

	u32 d_0 = comb_bit(b, 7, 0, ii) << 6;
	d_0 |= comb_bit(b, 6, 0, ii) << 5;
	d_0 |= comb_bit(b, 5, 0, ii) << 4;
	d_0 |= comb_bit(b, 4, 0, ii) << 3;
	d_0 |= comb_bit(b, 3, 0, ii) << 2;
	d_0 |= comb_bit(b, 2, 0, ii) << 1;
	d_0 |= comb_bit(b, 1, 0, ii);
	u32 s_0 = comb_bit(b, 0, 0, ii);

	ec_zero(p1);
	for (int ii = 0; ii < 128; ++ii) {
		// Generate a mask that is -1 if ii == index, else 0
		const u128 mask = ec_gen_mask(ii, d_0);

		// Add in the masked table entry
		ec_xor_mask_affine(GEN_TABLE_0[ii], mask, p1);
	}
	fe_mul(p1.x, p1.y, p1.t);
	ec_cond_neg(s_0 ^ 1, p1);

	u32 d_1 = comb_bit(b, 7, 1, ii) << 6;
	d_1 |= comb_bit(b, 6, 1, ii) << 5;
	d_1 |= comb_bit(b, 5, 1, ii) << 4;
	d_1 |= comb_bit(b, 4, 1, ii) << 3;
	d_1 |= comb_bit(b, 3, 1, ii) << 2;
	d_1 |= comb_bit(b, 2, 1, ii) << 1;
	d_1 |= comb_bit(b, 1, 1, ii);
	u32 s_1 = comb_bit(b, 0, 1, ii);

	ec_zero(p2);
	for (int ii = 0; ii < 128; ++ii) {
		// Generate a mask that is -1 if ii == index, else 0
		const u128 mask = ec_gen_mask(ii, d_1);

		// Add in the masked table entry
		ec_xor_mask_affine(GEN_TABLE_1[ii], mask, p2);
	}
	fe_mul(p2.x, p2.y, p2.t);
	ec_cond_neg(s_1 ^ 1, p2);
}

static u32 cond_neg(const u64 k[4], u64 r[4]) {
	u32 lsb = ((u32)k[0] & 1) ^ 1;
	u64 mask = (s64)0 - lsb;

	u64 nk[4];
	neg_mod_q(k, nk);

	r[0] = (k[0] & ~mask) ^ (nk[0] & mask);
	r[1] = (k[1] & ~mask) ^ (nk[1] & mask);
	r[2] = (k[2] & ~mask) ^ (nk[2] & mask);
	r[3] = (k[3] & ~mask) ^ (nk[3] & mask);

	return lsb;
}

void ec_mul_gen(const u64 k[4], ecpt_affine &R) {
	const int t = 252;
	const int w = 8;
	const int v = 2;
	const int e = 16; // t / wv
	const int d = 32; // ev
	const int l = 256; // dw
#if 0

	// Generate tables
	ecpt_affine table1[128], table2[128];
	ec_gen_tables_comb(table1, table2, EC_G);

	int words = 128 * (2 * 4);
	u64 *ptr = (u64*)&table2[0];
	cout << "static const u64 PRECOMP_TABLE = {" << endl;
	for (int ii = 0; ii < words; ii += 4) {
		if (ii % 16 == 12) {
			continue;
		}
		cout << hex << "\t0x" << ptr[ii] << "ULL, ";
		cout << hex << "0x" << ptr[ii+1] << "ULL, ";
		cout << hex << "0x" << ptr[ii+2] << "ULL, ";
		cout << hex << "0x" << ptr[ii+3] << "ULL," << endl;
	}
	cout << "};" << endl;

#endif

	// Recode scalar
	u64 a[4], b[4];
	u32 recode_lsb = cond_neg(k, a);
	ec_recode_scalar_comb(a, b);

	// Initialize working point
	ufe t2b;
	ecpt X, S, T;

	ec_table_select_comb(b, e - 1, S, T);
	fe_set_smallk(1, S.z);
	ec_add(S, T, X, true, true, false, t2b);

	for (int ii = e - 2; ii >= 0; --ii) {
		ec_table_select_comb(b, ii, S, T);

		ec_dbl(X, X, false, t2b);
		ec_add(X, S, X, true, false, false, t2b);
		ec_add(X, T, X, true, false, false, t2b);
	}

	// If recode_lsb == 1, X = -X
	ec_cond_neg(recode_lsb, X);

	// Multiply by 4 to avoid small subgroup attack
	ec_dbl(X, X, false, t2b);
	ec_dbl(X, X, false, t2b);

	// Compute affine coordinates in R
	ec_affine(X, R);
}

#endif


//// Constant-time Simultaneous Multiplication

/*
 * Precomputed table generation
 *
 * Using GLV-SAC Precomputation with m=4 [1], assuming window size of 1 bit
 */

static void ec_gen_table_4(const ecpt &a, const ecpt &b, const ecpt &c, const ecpt &d, ecpt TABLE[8]) {
	// P[0] = a
	ec_set(a, TABLE[0]);

	// P[1] = a + b
	ufe t2b;
	ec_add(a, b, TABLE[1], true, true, true, t2b);

	// P[2] = a + c
	ec_add(a, c, TABLE[2], true, true, true, t2b);

	// P[3] = a + b + c
	ec_add(TABLE[1], c, TABLE[3], true, true, true, t2b);

	// P[4] = a + d
	ec_add(a, d, TABLE[4], true, true, true, t2b);

	// P[5] = a + b + d
	ec_add(TABLE[1], d, TABLE[5], true, true, true, t2b);

	// P[6] = a + c + d
	ec_add(TABLE[2], d, TABLE[6], true, true, true, t2b);

	// P[7] = a + b + c + d
	ec_add(TABLE[3], d, TABLE[7], true, true, true, t2b);
}

/*
 * Constant-time table selection for m=4
 */

static CAT_INLINE void ec_table_select_4(const ecpt *table, const ufp &a, const ufp &b, const ufp &c, const ufp &d, const int index, ecpt &r) {
	int k = ((u32)(b.w >> index) & 1);
	k |= ((u32)(c.w >> index) & 1) << 1;
	k |= ((u32)(d.w >> index) & 1) << 2;

	ec_zero(r);

	const int TABLE_SIZE = 8;
	for (int ii = 0; ii < TABLE_SIZE; ++ii) {
		// Generate a mask that is -1 if ii == index, else 0
		const u128 mask = ec_gen_mask(ii, k);

		// Add in the masked table entry
		ec_xor_mask(table[ii], mask, r);
	}

	ec_cond_neg(((a.w >> index) & 1) ^ 1, r);
}

/*
 * Simultaneous multiplication by two variable base points
 *
 * Preconditions:
 * 	0 < a,b < q
 *
 * Multiplies the result of aP + bQ by 4 and stores it in R
 */

// R = a*4*P + b*4*Q
void ec_simul(const u64 a[4], const ecpt_affine &P, const u64 b[4], const ecpt_affine &Q, ecpt_affine &R) {
	// Decompose scalar into subscalars
	ufp a0, a1, b0, b1;
	s32 a0sign, a1sign, b0sign, b1sign;
	gls_decompose(a, a0sign, a0, a1sign, a1);
	gls_decompose(b, b0sign, b0, b1sign, b1);

	// P1, Q1 = endomorphism points
	ecpt_affine P1a, Q1a;
	gls_morph(P.x, P.y, P1a.x, P1a.y);
	gls_morph(Q.x, Q.y, Q1a.x, Q1a.y);

	// Expand base points
	ecpt P0, Q0, P1, Q1;
	ec_expand(P1a, P1);
	ec_expand(Q1a, Q1);
	ec_expand(P, P0);
	ec_expand(Q, Q0);

	// Set base point signs
	ec_cond_neg(a0sign, P0);
	ec_cond_neg(b0sign, Q0);
	ec_cond_neg(a1sign, P1);
	ec_cond_neg(b1sign, Q1);

	// Precompute multiplication table
	ecpt table[8];
	ec_gen_table_4(P0, P1, Q0, Q1, table);

	// Recode scalar
	u32 recode_bit = ec_recode_scalars_4(a0, a1, b0, b1, 127);

	// Initialize working point
	ecpt X;
	ec_table_select_4(table, a0, a1, b0, b1, 126, X);

	ufe t2b;
	for (int ii = 125; ii >= 0; --ii) {
		ecpt T;
		ec_table_select_4(table, a0, a1, b0, b1, ii, T);

		ec_dbl(X, X, false, t2b);
		ec_add(X, T, X, false, false, false, t2b);
	}

	// If bit == 1, X <- X + P (inverted logic from [1])
	ec_cond_add(recode_bit, X, P0, X, true, false, t2b);

	// Multiply by 4 to avoid small subgroup attack
	ec_dbl(X, X, false, t2b);
	ec_dbl(X, X, false, t2b);

	// Compute affine coordinates in R
	ec_affine(X, R);
}

